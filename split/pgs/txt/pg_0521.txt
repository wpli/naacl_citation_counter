of ZDD labels. This result can be derived from the result of (Knuth, 2011), Chap.7.1.4, exercise 266. Fig. 3(a) is a ZDD that represents the set of all rooted subtrees of the tree in Fig. 1(a), where we employ pre-ordering e1 , e2 , e3 , e4 , e5 , e6 . We next show the size of the ZDDs that represent the set of all subtrees of a multi-rooted tree. Proposition 4. Given an N node tree and the set of candidate root nodes R, the set of all possible subtrees can be represented by a ZDD whose number of nodes is O(N log |R|). Proof. (Sketch) The set of all possible subtrees can be represented as the union of the sets of rooted subtrees for different root r  R. The set of rooted subtrees for a root node r can be represented as a ZDD that has O(N ) nodes, hence the set of ZDDs for different root nodes has O(N |R|) nodes in total. We can further reduce this upper bound by employing appropriate depth first pre-ordering so as to share as many ZDD substructures as possible, and this ordering results in a union ZDD whose number of nodes is O(N log |R|). This proposition is related to a recently proved result that the set of all subtrees of an N -node tree can be represented as a ZDD whose number of nodes is O(N log N ) (Yasuda et al., 2014). This is a special case of the above theorem that R equals the set of all nodes of the tree, i.e., |R| = N . The key point is to use the heaviest-last depth first pre-order as the ZDD label order. In this order, a node with the heaviest weight always comes after other siblings, where we define the weight of a node as the size of the maximum rooted subtree T  T that is contained in its descendant tree. Fig. 3(b) is an example of the ZDD that represents the set of all possible rooted subtrees of the multi-rooted tree in Fig. 1(b), where the heaviest-last depth first preorder is e1 , e5 , e6 , e2 , e3 , e4 . The upper bound size of a ZDD for nested subtrees can be estimated by combining the above two theoretical results on rooted subtrees and multirooted subtrees. Proposition 5. For a nested tree whose sum of the number of nodes of inner trees is N , and the sets of candidate root nodes for inner trees are 467

R1 , . . . , RM , where M is the number of inner trees, we can represent the set of possible nested subtrees by O(N log |R |), where |R | = maxi |Ri |. Proof. (Sketch) The ZDD corresponding to the set of nested subtrees can be constructed as follows: first we make ZDDs that represent the set of rooted subtrees of the outer tree and inner trees. The outer tree is represented as a ZDD with O(N ) nodes, and the i-th inner tree is represented as a ZDD with O(Ni log |Ri |) nodes, where Ni is the number of nodes of the i-th inner tree. Then we can construct the ZDD for the nested tree by replacing each ZDD node of the outer-tree ZDD with the inner-tree ZDD corresponding to that node. Fig. 3(c) is a ZDD that represents the set of nested subtrees of the tree in Fig. 1(c), where we employ the order e1 , e2 , e3 , e4 , e5 , e6 , e7 , e8 . We can directly prove the running time of the DP algorithm by exploiting the above three results to show the DP algorithm for the three problems takes O(N L), O(N L log |R|), and O(N L log |R |) time, respectively. Here we assume that a ZDD that represents the set T is given. We need additional time for constructing a ZDD that represents T i.e. the input tree. However, ZDD construction also can be done in O(|Z |) for the three tree trimming problems. We show details of ZDD construction in the next section.

6

Efficient ZDD Construction

We introduce here an efficient algorithm for constructing a ZDD that is used in the tree trimming problems. A ZDD can be constructed by repeatedly applying set operations between intermediate ZDDs, however, this process may be too slow since the running time of the set operations depends on the size of input and output ZDDs. We first show the flow of an efficient ZDD construction algorithm for multi-rooted trees. This algorithm also can be used for constructing a ZDD for all rooted subtrees of a tree since a single-root tree is also a multi-rooted tree. The algorithm consists of two steps: first, we determine the appropriate order of ZDD nodes. We then use the top-down ZDD construction algorithm shown in (Knuth, 2011) (Chap.7.1.4, Exercise 55) to construct a ZDD. The

