be grouped together, obscuring critical mismatches. Instead, up-to-one mapping allows for two potential outcomes, both of which correspond directly to the intended user task: recognize consistent patterns across the models (when alignment occurs) and identify any deviations (when alignment fails). 3.2 Guidelines Adapted for Topic Models We synthesize the following four requirements from Krippendorff's guidelines (2004b). To calculate the equivalent of coder reliability, we advocate the use of multiple models to determine modeling consistency, which may be determined from the repeated applications of the same topic model, a search through the parameter space of a model, or the use of multiple models. Selecting an appropriate agreement coefficient depends on the underlying data type, such as binary, multivariate, ordered, or continuous codes (Cohen, 1960; Holsti, 1969; Krippendorff, 1970; Osgood, 1959; Scott, 1995). No widely-accepted similarity measure exists for aligning latent topics, which are probability distributions over a large vocabulary. We argue that validation tools must be sufficiently modular, in order to accept any user-defined topical similarity measure for aligning latent topics. Acceptable level of agreement depends on the purpose of the analysis, and should account for the costs of drawing incorrect conclusions from a coding scheme. For example, do "human lives hang on the results of a content analysis?" (Krippendorff, 2004b). Validation tools must allow users to set the appropriate acceptable level of agreement, and help users determine -- rather than dictate -- when topic models match and what constitutes reasonable variations in the model output. Finally, Krippendorff points out that aggregated statistics can obscure critical reliability failures, and practitioners must test individual variables. We interpret this recommendation as the need to present users with not a single overall alignment score but details at all levels: models, topics, and constituent words within each latent topic.

4.1

Hierarchical Clustering with Constraints

4

Interactive Topical Alignment

We introduce TopicCheck, an implementation of our design specifications. At the core of this tool is an interactive topical alignment algorithm. 178

Our algorithm can be considered as hierarchical agglomerative clustering with up-to-one mapping constraints. As input, it takes in three arguments: a list of topic models, a topical similarity measure, and a matching criterion. As output, it generates a list of topical groups, where each group contains a list of topics with at most one topic from each model. At initialization, we create a topical group for every topic in every model. We then iteratively merge the two most similar groups based on the user-supplied topical similarity measure, provided that the groups satisfy the user-specified matching criterion and the mapping constraints. When no new groups can be formed, the algorithm terminates and returns a sorted list of final topical groups. During the alignment process, the following two invariants are guaranteed: Every topic is always assigned to exactly one group; every group contains at most one topic from each model. A topic model m consists of a list of latent topics. A latent topic t is represented by a probability distribution over words. A topical group g also consists of a list of latent topics. Let |m|, |t|, and |g | denote the number of models, topics, and groups respectively. We create a total of |g | = |m| × |t| initial topical groups. Although |g | decreases by 1 after each merge, |g |  |t| at all times. At the end of alignment, |g | = |t| if and only if perfect alignment occurs and every group contains exactly one topic from each model. Users may supply any topical similarity measure that best suits their analysis needs. We select cosine similarity for our three case studies, though our software is modular and accepts any input. As a first implementation, we apply single-linkage clustering criteria when comparing the similarity of two topical groups. Single-linkage clustering is computationally efficient (Sibson, 1973), so that users may interact with the algorithm and receive feedback in real-time; our procedure generalizes to other linkage criteria such as complete-linkage or average-linkage. At each merge step, the most similar pair of topical groups are identified. If they meet the matching criteria and the mapping constraints, the pair is combined into a new group. Otherwise, the algorithm iteratively examines the next most similar pair until either a merge occurs or when all pairs are ex-

