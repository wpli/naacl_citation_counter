Lemma 1. In the two-registers system, all crossed arcs are added through register-stack operations.
das mer em Hans es huus halfed aastriiche that we Hans the house helped paint Figure 3: A clause with crossing edges (Shieber, 1985).

adding an arc between this token and the token in the first register. · Clear: Removes tokens from the registers, reducing them completely if they are covered by an edge in A or otherwise placing them back on the stack in order. If either R2 or the top of the stack is the token immediately to the left of the front of the buffer, that token is placed back on the buffer instead. · Register-Stack: Adds an arc between the top of the stack and one of the registers. A derivation excerpt for the clause in Figure 3 is shown in Table 3. The two tokens incident to all crossed arcs helped and paint are stored in the registers. The crossed arcs are then added through Register-Stack transitions, working outward from the registers through the previous words in the sentence: (paint, house), then (helped, Hans), etc. After all the crossed arcs incident to these two tokens have been added, the registers are cleared. Preconditions related to rootedness, singleheadedness, and acyclicity follow the arc-eager system straightforwardly: each transition that adds an arc (h, m) checks that m is not the root, m does not already have a head, and that h is not a descendant of m. Preconditions used to guarantee that trees output by the system are within the desired class are listed in Table 4. In particular, they ensure that all crossed arcs are incident to registers, and that each pair of registers entails an interval corresponding to a selfcontained set of crossed edges. To avoid traversing A while checking preconditions, two helper constants are used: IsCovered(Rk )2 and last3 .
IsCovered(R1) is true if there exists an arc in A with endpoints on either side of R1. Rather than enumerating arcs, this boolean can be updated in constant time by setting it to true only after a Register-Stack(2, dir) transition with 1 < R1; likewise R2 can only be covered with a Register-Stack(1, dir) transition with 1 > R2. 3 last is used to indicate the rightmost partially processed unreduced vertex after the last pair of registers were cleared (set to the rightmost in  ,  after each Clear transition).
2

Proof. Suppose for the sake of contradiction that a right arc (s, b) added when 1 = s and 1 = b is crossed in the final output tree (the argument for leftarcs is identical). Let (l, r) with l < r be an arc that crosses (s, b). One of {l, r} must be within the open interval (s, b) and one of {l, r}  / [s, b]. When the arc (s, b) is added, no tokens in the open interval (s, b) remain. They cannot be in the stack or buffer since the stack and buffer always remain in order; they cannot be in registers by the precondition R1  / (1 , 1 )  R2  / (1 , 1 ) for Right-Arc transitions. Thus, (l, r) must already have been added. It cannot be that l  (s, b) and r > b, since the rest of the buffer has never been accessible to tokens left of b. The ordering must then be l < s < r < b. Figure 4 shows that for each way (l, r) could have been added (Right-Arc, 4a; Store(right), 4b; Register-Stack(k, to-stack), 4c; Register-Stack(k, to-register), 4d), it is impossible to keep s unreduced without violating one of the preconditions. The only other type of arc-adding operation is Store. Similar logic holds: arcs added through LeftArc and Right-Arc transitions cannot cross these arcs, since they would violate the preconditions R1  / (1 , 1 )  R2  / (1 , 1 ); later arcs involving other registers would imply Clear operations that violate 2 < R1  1  / (R1, R2).

5 Parsing 2-Crossing Interval Trees with the Two-Registers Transition System
In this section we show the correspondence between the two-registers transition system and 2-Crossing Interval trees: each forest output by the transition system is a 2-Crossing Interval tree (soundness) and every 2-Crossing Interval tree can be produced by the two-registers system (completeness). 5.1 Soundness: Two-Registers System  2-Crossing Interval trees

Proof. Every crossed arc is incident to a token that was in a register (Lemma 1). There cannot be any overlap between register arcs where the corresponding tokens were not in the registers simultaneously: the Clear transition updates the book-keeping constant last to be the rightmost vertex associated with

666

