the key predicates in the sentence, motivating the central notion proposed in this paper, that of Predicate Schemas. In this paper, we develop the notion of Predicate Schemas, instantiate them with automatically acquired knowledge, and show how to compile it into constraints that are used to resolve coreference within a general Integer Linear Programming (ILP) driven approach to coreference resolution. Specifically, we study two types of Predicate Schemas that, as we show, cover a large fraction of the challenging cases. The first specifies one predicate with its subject and object, thus providing information on the subject and object preferences of a given predicate. The second specifies two predicates with a semantically shared argument (either subject or object), thus specifies role preferences of one predicate, among roles of the other. We instantiate these schemas by acquiring statistics in an unsupervised way from multiple resources including the Gigaword corpus, Wikipedia, Web Queries and polarity information. A lot of recent work has attempted to utilize similar types of resources to improve coreference resolution (Rahman and Ng, 2011a; Ratinov and Roth, 2012; Bansal and Klein, 2012; Rahman and Ng, 2012). The common approach has been to inject knowledge as features. However, these pieces of knowledge provide relatively strong evidence that loses impact in standard training due to sparsity. Instead, we compile our Predicate Schemas knowledge automatically, at inference time, into constraints, and make use of an ILP driven framework (Roth and Yih, 2004) to make decisions. Using constraints is also beneficial when the interaction between multiple pronouns is taken into account when making global decisions. Consider the following example: Ex.3 [Jack]e1 threw the bags of [John]e2 into the water since [he]pro1 mistakenly asked [him]pro2 to carry [his]pro3 bags. In order to correctly resolve the pronouns in Ex.3, one needs to have the knowledge that "he asks him" indicates that he and him refer to different entities (because they are subject and object of the same predicate; otherwise, himself should be used instead of him). This knowledge, which can be easily represented as constraints during inference, then impacts other pronoun decisions in a global decision with re810

spect to all pronouns: pro3 is likely to be different from pro2 , and is likely to refer to e2 . This type of inference can be easily represented as a constraint during inference, but hard to inject as a feature. We then incorporate all constraints into a general coreference system (Chang et al., 2013) utilizing the mention-pair model (Ng and Cardie, 2002b; Bengtson and Roth, 2008; Stoyanov et al., 2010). A classifier learns a pairwise metric between mentions, and during inference, we follow the framework proposed in Chang et al. (2011) using ILP. The main contributions of this paper can be summarized as follows: 1. We propose the Predicate Schemas representation and study two specific schemas that are important for coreference. 2. We show how, in a given context, Predicate Schemas can be automatically compiled into constraints and affect inference. 3. Consequently, we address hard pronoun resolution problems as a standard coreference problem and develop a system1 which shows significant improvement for hard coreference problems while achieving the same state-of-the-art level of performance on standard coreference problems. The rest of the paper is organized as follows. We describe our Predicate Schemas in Section 2 and explain the inference framework and automatic constraint generation in Section 3. A summary of our knowledge acquisition steps is given in Section 4. We report our experimental results and analysis in Section 5, and review related work in Section 6.

2

Predicate Schema

In this section we present multiple kinds of knowledge that are needed in order to improve hard coreference problems. Table 1 provides two example sentences for each type of knowledge. We use m to refer to a mention. A mention can either be an entity e or a pronoun pro. predm denotes the predicate of m (similarly, predpro and prede for pronouns and entities, respectively). For instance, in sentence 1.1 in Table 1, the predicate of e1 and e2
Available at http://cogcomp.cs.illinois.edu/page/software view/Winocoref
1

