covers. Nivre (2009) introduced a transition system that covered all non-projective trees via a new swap transition that locally re-ordered words in the sentence. The downside of the swap transition is that it made worst-case run time quadratic. Also, as shown in Table 7, the attachment scores of uncrossed arcs decreases compared with arc-eager. Two other transition systems that can be seen as generalizations of arc-eager are the 2-Planar transition system (G´ omez-Rodr´ iguez and Nivre, 2010; G´ omez-Rodr´ iguez and Nivre, 2013), which adds a second stack, and the transition system of Choi (Choi and McCallum, 2013), which adds a deque. The arc-eager, 2-registers, 2-planar, and the Choi transition systems can be seen as along a continuum for trading off various properties. In terms of coverage, projective trees (arc-eager)  2-Crossing Interval trees (this paper)  2-planar trees  all directed trees (Choi). The Choi system uses a quadratic number of transitions in the worst case, while arc-eager, 2-registers, and 2-planar all use at most O(n) transitions. Checking for cycles does not need to be done at all in the arc-eager system, can be with a few constant operations in the 2-registers system, and can be done in amortized constant time for the other systems (G´ omez-Rodr´ iguez and Nivre, 2013). In the graph-based parsing literature, there has also been a plethora of work on non-projective parsing (McDonald et al., 2005; Martins et al., 2009; Koo et al., 2010). Recent work by Pitler and colleagues is the most relevant to the work described here (Pitler et al., 2012, 2013, 2014). Like this work, Pitler et al. define a restricted class of non-projective trees and then a graph-based parsing algorithm that parses exactly that set. The register mechanism in two-registers transition parsing bears a resemblance to registers in Augmented Transition Networks (ATNs) (Woods, 1970). In ATNs, global registers are introduced to account for a wide range of natural language phenomena. This includes long-distance dependencies, which is a common source of non-projective trees. While transition-based parsing and ATNs use quite different control and data structures, this observation does raise an interesting question about the relationship between these two parsing paradigms. There are many additional points of interest to explore based on this study. A first step would 670

be to generalize the two-registers transition system to a k -registers system that can parse exactly k Crossing Interval trees. This will necessarily lead to an asymptotic increase in run-time as k approaches n. With larger values of k , the system would need additional transitions to add arcs between the registers (extending the Store transition to consider all subsets of arcs with the existing registers would become exponential in k ). If k were to increase all the way to n, such a system would probably look very similar to list-based systems that consider all pairs of arcs (Covington, 2001; Nivre, 2008). Another direction would be to define dynamic oracles around the two-registers transition system (Goldberg and Nivre, 2012; Goldberg and Nivre, 2013). The additional transitions here have interpretations in terms of which trees are still reachable (Register-Stack(·) adds an arc; Store and Clear indicate that particular vertices should be incident to crossed arcs or are finished with crossed arcs, respectively). The two-registers system is not quite arc-decomposable (Goldberg and Nivre, 2013): if the wrong vertex is stored in a register then a later pair of crossed arcs might both be individually reachable but not jointly reachable. However, there may be a "crossing-sensitive" variant of arcdecomposability that takes into account the vertices crossed arcs are incident to that would apply here.

9

Conclusion

In this paper we presented k -Crossing Interval trees, a class of mildly non-projective trees with high empirical coverage. For the case of k = 2, we also presented a transition system that is sound and complete with respect to this class that is a generalization of the arc-eager transition system and maintains many of its desirable properties, most notably a linear worst-case run-time. Empirically, this transition system outperforms its projective counterpart as well as a quadratic swap-based transition system with larger coverage.

Acknowledgments
We'd like to thank Mike Collins, Terry Koo, Joakim Nivre, Fernando Pereira, and Slav Petrov for helpful discussions and comments.

