p:X stances pk :Y of deduction rules and i,j  . This is a regular grammar, its string language can thus be characterized by a regular expression. The construction of the set of states starts with q0 = { : S }. For every state q , every nonterminal A and every 1  i  dim (A), we define read (q, Ai , p) = { : j,k+1 | p : j,k  q and there is some l such that rhs (, l) = A and lhs (, j, k ) = rhs (, l, i-1)} and read (q, Ai , p) = read (q, Ai , p). Similarly, for every such q and every a  T , we define read (q, a, p) = { : j,k+1 | p : j,k  q and lhs (, j, k ) = a} and read (q, a, p) = read (q, a, p). The set of states of our automaton is then the closure of {q0 } under the application of the read-functions. The edges in our automaton correspond to readtransitions, where each edge is labeled with the corresponding pair Ai , p or a, p respectively. The automaton we obtain for the grammar in figure 1 is shown in figure 5. The number of possible states  : S , 1 : 0,0 11 : 0,0 , 11 : 0,0 q0 A1 , 1 q3  : 0,1 1+ : 1,0 , 1+ : 1,0 b, 1+ q6  : 1,1 A2 ,  S1 ,  a, 11 q8 :S · A2 , 1+ q4 q7  : 0,2 a, 1  : 1,1 a,  q5  : 1,2  : 0,1 ,  : 0,1 1 : 0,0 , 1 : 0,0 A1 ,  q2  : 0,2 q1

0 1 2 3 4 5 6 7 8

a s(11, 1) s(1, 1)

b r(, 1) r(, 1)

A1 1, 3 , 2

A2

S1 , 8

s(1+ , 6) s(, 5)

1+ , 4 , , 7

r(, 2) r(, 2) r(, 1) acc

Figure 6: The parse table
stack completed input operation :q0 [] aaba initial state :q0 a 11:q1 [] aba shift a,11 [] ba shift a,1 :q0 a 11:q1 a 111:q1 :q0 a 11:q1 A1 11:q2 [111:1 ] ba suspend 0,1 :q0 A1 1:q3 [111:1 ,11:1 ] ba suspend 0,2 [111:1 ,11:1 ] a shift b,1+ :q0 A1 1:q3 b 11+ :q6 :q0 A1 1:q3 A2 11+ :q4 [11:1 ] a reduce 1,1 :q0 A1 1:q3 A2 11+ :q4 a 11+ :q5 [11:1 ]  shift a, :q0 A1 1:q3 A2 1:q4 []  reduce 1,2 []  reduce 0,2 :q0 S1 :q8

Figure 7: Sample run with w = aaba

for our example. 3.3 Parsing We run the automaton with  : q0 , [ ], w and input w = aaba. The trace is shown in figure 7. We start in q0 , and shift two as, which leads to q1 . We have then fully recognized the first components of  and  : We suspend them and keep them in the set of completed components, which takes us to q3 . Shifting the b takes us to q6 , from where we can reduce, which finally takes us to q4 . From there, we can shift the remaining a (to q5 ), with which we have fully recognized  . We can now reduce both  and with that, , which takes us to the accepting state q8 .

Figure 5: The automaton

is necessarily finite since each state is the closure of some set containing only items with address . There are only finitely many such sets. In the parse table, our operations are s(p, q ) for shifting some terminal a followed by the old address concatenated with p and state q and r(, i) for reducing the ith component of rule . The two reduce operations can be distinguished by the component indices. Furthermore, the goto-part of the table tells where to go when traversing a component edge and which address to add then. The parse table can be read off the automaton as follows: action (q, a) = s(p, q ) iff read (q, a, p) = q ; action (q, -) = r(, i) iff there is some p : i,k  q such that k = |lhs (, i)|. Concerning the goto part of the table, we have goto (q, Ai ) = p, q iff read (q, Ai , p) = q . Figure 6 shows the parse table

4

Conclusion

We presented the first LR style algorithm for LCFRS parsing. It offers a convenient factorization of predict/resume operations. We are currently exploring the possibility to use it in data-driven parsing.

Acknowledgments
The work presented in this paper was partly funded by the German Research Foundation (DFG). We wish to thank three anonymous reviewers for their valuable comments.

1254

