Tutor Student Tutor Tutor Tutor Student Tutor Student

we also have the zipCode int, which can be turned into a string isn't that also declared in the same place? yes, but txtZip isn't a String, it's a text field for the gui so look in actionPerformed yeah, see how they get the text from it? you could copy and use that code if you wanted okay, i'll try that. you'll want to use the .trim() part too yeah, you had it

public class PostalFrame extend s JFrame implem ents ActionListener { /** the label for the zip code */ privat e JLabel lblZip; /** the text field for the zip code */ privat e JTextField txtZip;

......
/** the translation table */ privat e int table[][]; /** the numerical representation of the zip code */ privat e int zipCode; /** * Answers a PostalFrame object to create a simple GUI * to produce a postal bar code for the user's zip code */

......
public void actionPerformed(ActionEvent e) { String zip = new String(); if (e.getSource() == btnZip) { // take text from textfield and trim off any // whitespace at either end zip = txtZip.getText().trim();

......
Dialogue Excerpt Corresponding Problem-Solving Artifact Figure 2. Dialogue excerpt from the corpus.

sider the noun phrase "a 2 dimensional array". Its head is "array" and its dependents are "a" as the determiner and "2 dimensional" as an adjective phrase. In this simple case the syntactic boundaries also indicate semantic segments, as these dependents indicate one or more attributes of the head. If this relationship were always true, the semantic structure understanding task would be a labeling task that only requires assigning a semantic tag to each syntactic segment of the noun phrase. But this is not always true, in part because a syntactic parser trained on an open-domain corpus will not necessarily perform well on domain language (McClosky et al., 2010). For example, in the noun phrase "the outer for loop," which also occurs in the Java programming corpus, the head of the noun phrase is "for loop," but the syntactic parse (generated by the Stanford parser) of this noun phrase understandably (but incorrectly) identifies this head as part of a prepositional phrase (Figure 3). To address this challenge, this paper utilizes a joint segmentation and semantic labeling approach that does not rely on accurate syntactic parsing within noun phrases. In this approach the head and dependents of each noun phrase are each referred to as a segment, with exactly one segment per dependent, and one or more words per segment. Iden-

tifying these segments correctly is essential to correct assignment of semantic tags. Pipeline methods for semantic segmentation rely on stable performance of an open domain parser, but as described above, this assumption is not desirable for grounding some domain language. We therefore utilize joint segmentation and labeling and apply a Conditional Random Field approach (Lafferty, 2001), a natural choice for the sequential data segmentation and labeling problem.
NP

NP

PP

DT

JJ

IN

NP

the

outer

for

NN

loop Figure 3. A parse of "the outer for loop" from Stanford Parser.

845

